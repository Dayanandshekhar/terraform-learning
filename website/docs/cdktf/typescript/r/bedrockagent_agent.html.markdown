---
subcategory: "Agents for Amazon Bedrock"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent"
description: |-
  Terraform resource for managing an AWS Agents for Amazon Bedrock Agent.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent

Terraform resource for managing an AWS Agents for Amazon Bedrock Agent.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgent } from "./.gen/providers/aws/";
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_1", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const exampleAgentPermissions = new DataAwsIamPolicyDocument(
      this,
      "example_agent_permissions",
      {
        statement: [
          {
            actions: ["bedrock:InvokeModel"],
            resources: [
              "arn:aws:bedrock:${" +
                dataAwsRegionCurrent.name +
                "}::foundation-model/anthropic.claude-v2",
            ],
          },
        ],
      }
    );
    const exampleAgentTrust = new DataAwsIamPolicyDocument(
      this,
      "example_agent_trust",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            condition: [
              {
                test: "StringEquals",
                values: [Token.asString(current.accountId)],
                variable: "aws:SourceAccount",
              },
              {
                test: "ArnLike",
                values: [
                  "arn:aws:bedrock:${" +
                    dataAwsRegionCurrent.name +
                    "}:${" +
                    current.accountId +
                    "}:agent/*",
                ],
                variable: "AWS:SourceArn",
              },
            ],
            principals: [
              {
                identifiers: ["bedrock.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(exampleAgentTrust.json),
      namePrefix: "AmazonBedrockExecutionRoleForAgents_",
    });
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example_5", {
      policy: Token.asString(exampleAgentPermissions.json),
      role: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyExample.overrideLogicalId("example");
    new BedrockagentAgent(this, "test", {
      agent_name: "my-agent-name",
      agent_resource_role_arn: example.arn,
      foundation_model: "anthropic.claude-v2",
      idle_session_ttl_in_seconds: 500,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `agent_name` - (Required) Name for the agent.
* `agent_resource_role_arn` - (Required) ARN of the Role for the agent.
* `foundation_model` - (Required) Foundation model for the agent to use.

The following arguments are optional:

* `customer_encryption_key_arn` - (Optional) ARN of customer manager key to use for encryption.
* `description` - (Optional) Description of the agent.
* `idleSessionTtlInSeconds` - (Optional) TTL in seconds for the agent to idle.
* `instruction` - (Optional) Instructions to tell agent what it should do.
* `prompt_override_configuration` (Optional) Prompt Override Configuration
* `tags` - (Optional) Key-value tags for the place index. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### prompt_override_configuration

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `prompt_configurations` - (Required) List of prompt configurations.

The following arguments are optional:

* `override_lambda` - (Optional) ARN of Lambda to use when parsing the raw foundation model output.

### prompt_configurations

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `base_prompt_template` - (Required) Prompt template to replace default.
* `parser_mode` - (Required) DEFAULT or OVERRIDDEN to control if the `override_lambda` is used.
* `prompt_creation_mode` - (Required) DEFAULT or OVERRIDDEN to control if the default or provided `base_prompt_template` is used,
* `prompt_state` - (Required) ENABLED or DISABLED to allow the agent to carry out the step in `prompt_type`.
* `prompt_type` - (Required) The step this prompt applies to. PRE_PROCESSING | ORCHESTRATION | POST_PROCESSING | KNOWLEDGE_BASE_RESPONSE_GENERATION
* `inference_configuration` - (Required) Configures inference for the agent

### inference_configuration

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `maxLength` - (Required) Maximum number of tokens in the response between 0 and 4096.
* `stop_sequences` - (Required) List of stop sequences that cause the model to stop generating the response.
* `temperature` - (Required) Likelihood of model selecting higher-probability options when generating a response.
* `top_k` - (Required) Defines the number of most-likely candidates the model chooses the next token from.
* `top_p` - (Required) Defines the number of most-likely candidates the model chooses the next token from.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `agent_arn` - ARN of the Agent.
* `agent_id` - ID of the Agent.
* `agentVersion` - Version of the Agent.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Agents for Amazon Bedrock Agent using the `example_id_arg`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgent } from "./.gen/providers/aws/";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BedrockagentAgent.generateConfigForImport(this, "example", "abcdef1234");
  }
}

```

Using `terraform import`, import Agents for Amazon Bedrock Agent using the `abcdef1234`. For example:

```console
% terraform import aws_bedrockagent_agent.example abcdef1234
```

<!-- cache-key: cdktf-0.20.1 input-306d970d030715dd4c6cd2be8fc7e20abe1b373924f053a1d7b97a6ba63f9f98 -->