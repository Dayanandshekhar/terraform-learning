---
subcategory: "Agents for Amazon Bedrock"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent_alias"
description: |-
  Terraform resource for managing an AWS Agents for Amazon Bedrock Agent Alias.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent_alias

Terraform resource for managing an AWS Agents for Amazon Bedrock Agent Alias.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import {
  BedrockagentAgent,
  BedrockagentAgentAlias,
} from "./.gen/providers/aws/";
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_1", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const exampleAgentPermissions = new DataAwsIamPolicyDocument(
      this,
      "example_agent_permissions",
      {
        statement: [
          {
            actions: ["bedrock:InvokeModel"],
            resources: [
              "arn:aws:bedrock:${" +
                dataAwsRegionCurrent.name +
                "}::foundation-model/anthropic.claude-v2",
            ],
          },
        ],
      }
    );
    const exampleAgentTrust = new DataAwsIamPolicyDocument(
      this,
      "example_agent_trust",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            condition: [
              {
                test: "StringEquals",
                values: [Token.asString(current.accountId)],
                variable: "aws:SourceAccount",
              },
              {
                test: "ArnLike",
                values: [
                  "arn:aws:bedrock:${" +
                    dataAwsRegionCurrent.name +
                    "}:${" +
                    current.accountId +
                    "}:agent/*",
                ],
                variable: "AWS:SourceArn",
              },
            ],
            principals: [
              {
                identifiers: ["bedrock.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(exampleAgentTrust.json),
      namePrefix: "AmazonBedrockExecutionRoleForAgents_",
    });
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example_5", {
      policy: Token.asString(exampleAgentPermissions.json),
      role: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyExample.overrideLogicalId("example");
    const test = new BedrockagentAgent(this, "test", {
      agent_name: "my-agent-name",
      agent_resource_role_arn: example.arn,
      foundation_model: "anthropic.claude-v2",
      idle_ttl: 500,
    });
    const awsBedrockagentAgentAliasExample = new BedrockagentAgentAlias(
      this,
      "example_7",
      {
        agent_alias_name: "my-agent-alias",
        agent_id: test.agentId,
        description: "Test ALias",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsBedrockagentAgentAliasExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `agent_alias_name` - (Required) Name of the alias.
* `agent_id` - (Required) Identifier of the agent to create an alias for.
* `tags` - (Optional) Key-value tags for the place index. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

The following arguments are optional:

* `description` - (Optional) Description of the alias of the agent.
* `routingConfiguration` - (Optional) Routing configuration of the alias

### routing_configuration

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `agentVersion` - (Required) Version of the agent the alias routes to.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `agent_alias_arn` - ARN of the Agent Alias.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Agents for Amazon Bedrock Agent Alias using the `ABCDE12345,FGHIJ67890`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgentAlias } from "./.gen/providers/aws/";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BedrockagentAgentAlias.generateConfigForImport(
      this,
      "example",
      "ABCDE12345,FGHIJ67890"
    );
  }
}

```

Using `terraform import`, import Agents for Amazon Bedrock Agent Alias using the `AGENT_ID,ALIAS_ID`. For example:

```console
% terraform import aws_bedrockagent_agent_alias.example AGENT_ID,ALIAS_ID
```

<!-- cache-key: cdktf-0.20.1 input-69b8b4162313e3b5a7af86fbc431b675e1ab651098ee5df619207e5cdfa78cc6 -->