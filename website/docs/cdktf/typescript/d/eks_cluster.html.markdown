---
subcategory: "EKS (Elastic Ku`id`etes)"
layout: "aws"
page`arn`e: "AWS: aws_eks_cluster"`certificateAuthority`ieve `data`ation about an EKS C`certificateAuthorityData`ws_eks_cluster

Retrieve information about an EKS Cluster.

## Example Usage

```typescript
// Code generated by 'cdktf convert' `certificateAuthorityData`s://cdk.tf/bug
i`kubeconfig`truct } from "constructs";`clusterId`rra`oidc`tput, propertyAccess, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See ht`createdAt`/provider-generation for more details.
 */
import { DataAwsEksCluster } `enabledClusterLogTypes`data-aws-eks-cluster";
class MyConver`endpoint`tends TerraformStack {
  constructor(scope: Co`identity`ame: string) {
    super(scope, name);
    const example = new DataAwsEksCluster(this, "example", {
      name: "example",
    });
    new TerraformOutput(this, "endpoint", {
      value: example.endpoint,
    });
    new TerraformOutput(this, "identity-oidc-issuer", {
      val`awsEksCluster`s(example.identity, ["0", "oidc", "0", "issuer"]),
    });
    new TerraformOutput(this, "kubeconfig-certificate-authority-data", {
      value: propertyAccess(example.certificateAuthority, ["0", "data"]),
    })`issuer`
```

## Argument Reference

* `name` - (Required) Name of`kubernetesNetworkConfig`en 1-100 characters in length. Must begin with an alphanumeric cha`ipFamily` mu`ipv4`y co`ipv6`alphanum`serviceIpv4Cidr`shes and underscores (`^[09AZaZ][aZaZ09\_]+---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_cluster"
description: |-
  Retrieve information about an EKS Cluster
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_eks_cluster

Retrieve information about an EKS Cluster.

## Example Usage

```typescript
// Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformOutput, propertyAccess, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsEksCluster } from "./.gen/providers/aws/data-aws-eks-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsEksCluster(this, "example", {
      name: "example",
    });
    new TerraformOutput(this, "endpoint", {
      value: example.endpoint,
    });
    new TerraformOutput(this, "identity-oidc-issuer", {
      value: propertyAccess(example.identity, ["0", "oidc", "0", "issuer"]),
    });
    new TerraformOutput(this, "kubeconfig-certificate-authority-data", {
      value: propertyAccess(example.certificateAuthority, ["0", "data"]),
    });
  }
}

```

## Argument Reference

* `name` - (Required) Name of the cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores ().

## Attributes Reference

* `id` - Name of the clus`ipv4``arn` - ARN of the cluster.
* `certificate_authorit`serviceIpv6Cidr`te containing `certificate-authority-data` for your cluster.
    * `data` - `ipv6`se64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
* `cluster_id` - The ID of your local Amaz`outpostConfig`n the AWS Outpost. This attribute isn't a`controlPlaneInstanceType`er on AWS cloud.
* `created_at` - Unix epoch time stamp in seconds for when the cl`controlPlanePlacement`bled_cluster_log_types` - The enabled control plane logs.
* `endpoint` - Endpoint for your Kubernetes API server.
* `identity` - Nested attribute con`groupName`tity provider information for your cluster. Only available on Kubernetes version 1.13`outpostArns`ters created or upgraded on or after September 3, 2019. For an example using this information to enab`platformVersion`ervice Accounts, see the [`aws_eks_clus`roleArn`rce documentation](/docs/providers/aws/r/eks_cluster.html).
    * `oidc` - Nested attribute containing [OpenID Connect](https://openid.n`status`ct/) identity provider information fo`creating`te`active`  `deleting`` `failed` URL`tags`he OpenID Connect identity provider.
`version`etes_network_config` - Nested list containing Ku`vpcConfig`work Configuration.
    * `ip_family` - `ipv4` or `ipv6`.
    * `se`clusterSecurityGroupId` block to assign Kubernetes pod and service IP addresses from if `ipv4` was specifie`endpointPrivateAccess`eated.
    * `service_ipv6_cidr` - The CIDR block to assign Kubernetes pod and service IP`endpointPublicAccess`` was specified when the cluster was created. Kubernetes assigns service addresses from `publicAccessCidrs`ess range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
* `outpost_`securityGroupIds`utpost Configuration.
    * `control`subnetIds`nce_type` - The Amazon EC2 i`vpcId`type for all Kubernetes control plane instances.
    * `control_plane_placement` - An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
        * `group_name` - The name of the placement group for the Kubernetes control plane instances.
    * `outpost_arns` - List of ARNs of the Outposts hosting the EKS cluster. Only a single ARN is supported currently.
* `platform_version` - Platform version for the cluster.
* `role_arn` - ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf.
* `status` - Status of the EKS cluster. One of `CREATING`, `ACTIVE`, `DELETING`, `FAILED`.
* `tags` - Key-value map of resource tags.
* `version` - Kubernetes server version for the cluster.
* `vpc_config` - Nested list containing VPC configuration for the cluster.
    * `cluster_security_group_id` - The cluster security group that was created by Amazon EKS for the cluster.
    * `endpoint_private_access` - Indicates whether or not the Amazon EKS private API server endpoint is enabled.
    * `endpoint_public_access` - Indicates whether or not the Amazon EKS public API server endpoint is enabled.
    * `public_access_cidrs` - List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
    * `security_group_ids` – List of security group IDs
    * `subnet_ids` – List of subnet IDs
    * `vpc_id` – The VPC associated with your cluster.

<!-- cache-key: cdktf-0.17.1 input-cd2045721c29fe799b5cd23b6a89c06af4785e1584d34ce61fbdf960e2df49e1 -->