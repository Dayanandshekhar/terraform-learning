---
subcategory: "Agents for Amazon Bedrock"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent"
description: |-
  Terraform resource for managing an AWS Agents for Amazon Bedrock Agent.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent

Terraform resource for managing an AWS Agents for Amazon Bedrock Agent.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws. import BedrockagentAgent
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        data_aws_region_current = DataAwsRegion(self, "current_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_current.override_logical_id("current")
        example_agent_permissions = DataAwsIamPolicyDocument(self, "example_agent_permissions",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["bedrock:InvokeModel"],
                resources=["arn:aws:bedrock:${" + data_aws_region_current.name + "}::foundation-model/anthropic.claude-v2"
                ]
            )
            ]
        )
        example_agent_trust = DataAwsIamPolicyDocument(self, "example_agent_trust",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[Token.as_string(current.account_id)],
                    variable="aws:SourceAccount"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ArnLike",
                    values=["arn:aws:bedrock:${" + data_aws_region_current.name + "}:${" + current.account_id + "}:agent/*"
                    ],
                    variable="AWS:SourceArn"
                )
                ],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["bedrock.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        example = IamRole(self, "example",
            assume_role_policy=Token.as_string(example_agent_trust.json),
            name_prefix="AmazonBedrockExecutionRoleForAgents_"
        )
        aws_iam_role_policy_example = IamRolePolicy(self, "example_5",
            policy=Token.as_string(example_agent_permissions.json),
            role=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_example.override_logical_id("example")
        BedrockagentAgent(self, "test",
            agent_name="my-agent-name",
            agent_resource_role_arn=example.arn,
            foundation_model="anthropic.claude-v2",
            idle_session_ttl_in_seconds=500
        )
```

## Argument Reference

The following arguments are required:

* `agent_name` - (Required) Name for the agent.
* `agent_resource_role_arn` - (Required) ARN of the Role for the agent.
* `foundation_model` - (Required) Foundation model for the agent to use.

The following arguments are optional:

* `customer_encryption_key_arn` - (Optional) ARN of customer manager key to use for encryption.
* `description` - (Optional) Description of the agent.
* `idle_session_ttl_in_seconds` - (Optional) TTL in seconds for the agent to idle.
* `instruction` - (Optional) Instructions to tell agent what it should do.
* `prompt_override_configuration` (Optional) Prompt Override Configuration
* `tags` - (Optional) Key-value tags for the place index. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### prompt_override_configuration

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `prompt_configurations` - (Required) List of prompt configurations.

The following arguments are optional:

* `override_lambda` - (Optional) ARN of Lambda to use when parsing the raw foundation model output.

### prompt_configurations

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `base_prompt_template` - (Required) Prompt template to replace default.
* `parser_mode` - (Required) DEFAULT or OVERRIDDEN to control if the `override_lambda` is used.
* `prompt_creation_mode` - (Required) DEFAULT or OVERRIDDEN to control if the default or provided `base_prompt_template` is used,
* `prompt_state` - (Required) ENABLED or DISABLED to allow the agent to carry out the step in `prompt_type`.
* `prompt_type` - (Required) The step this prompt applies to. PRE_PROCESSING | ORCHESTRATION | POST_PROCESSING | KNOWLEDGE_BASE_RESPONSE_GENERATION
* `inference_configuration` - (Required) Configures inference for the agent

### inference_configuration

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `max_length` - (Required) Maximum number of tokens in the response between 0 and 4096.
* `stop_sequences` - (Required) List of stop sequences that cause the model to stop generating the response.
* `temperature` - (Required) Likelihood of model selecting higher-probability options when generating a response.
* `top_k` - (Required) Defines the number of most-likely candidates the model chooses the next token from.
* `top_p` - (Required) Defines the number of most-likely candidates the model chooses the next token from.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `agent_arn` - ARN of the Agent.
* `agent_id` - ID of the Agent.
* `agent_version` - Version of the Agent.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Agents for Amazon Bedrock Agent using the `example_id_arg`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws. import BedrockagentAgent
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BedrockagentAgent.generate_config_for_import(self, "example", "abcdef1234")
```

Using `terraform import`, import Agents for Amazon Bedrock Agent using the `abcdef1234`. For example:

```console
% terraform import aws_bedrockagent_agent.example abcdef1234
```

<!-- cache-key: cdktf-0.20.1 input-306d970d030715dd4c6cd2be8fc7e20abe1b373924f053a1d7b97a6ba63f9f98 -->