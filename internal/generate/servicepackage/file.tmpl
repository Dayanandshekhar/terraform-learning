// Code generated by internal/generate/servicepackages/main.go; DO NOT EDIT.

package {{ .ProviderPackage }}

import (
	"context"
	"log"

{{if not .SkipClientGenerate }}
	{{- if eq .SDKVersion "1" "1,2" }}
	aws_sdkv1 "github.com/aws/aws-sdk-go/aws"
	endpoints_sdkv1 "github.com/aws/aws-sdk-go/aws/endpoints"
	session_sdkv1 "github.com/aws/aws-sdk-go/aws/session"
	{{ .GoV1Package }}_sdkv1 "github.com/aws/aws-sdk-go/service/{{ .GoV1Package }}"
	{{- end }}
	{{- if eq .SDKVersion "2" "1,2" }}
	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	{{ .GoV2Package }}_sdkv2 "github.com/aws/aws-sdk-go-v2/service/{{ .GoV2Package }}"
	{{- end }}
{{- end }}
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
{{- if ne .ProviderPackage "meta" }}
	"github.com/hashicorp/terraform-provider-aws/names"
{{- end }}
)

type servicePackage struct {}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource {
{{- range .FrameworkDataSources }}
		{
			Factory: {{ .FactoryName }},
			{{- if ne .Name "" }}
			Name:    "{{ .Name }}",
			{{- end }}
			{{- if .TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne .TagsIdentifierAttribute "" }}
				IdentifierAttribute: "{{ .TagsIdentifierAttribute }}",
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource {
{{- range .FrameworkResources }}
		{
			Factory: {{ .FactoryName }},
			{{- if ne .Name "" }}
			Name:    "{{ .Name }}",
			{{- end }}
			{{- if .TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne .TagsIdentifierAttribute "" }}
				IdentifierAttribute: "{{ .TagsIdentifierAttribute }}",
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource {
{{- range $key, $value := .SDKDataSources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			{{- if ne $value.Name "" }}
			Name:     "{{ $value.Name }}",
			{{- end }}
			{{- if $value.TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne $value.TagsIdentifierAttribute "" }}
				IdentifierAttribute: "{{ $value.TagsIdentifierAttribute }}",
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource {
{{- range $key, $value := .SDKResources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			{{- if ne $value.Name "" }}
			Name:     "{{ $value.Name }}",
			{{- end }}
			{{- if $value.TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne $value.TagsIdentifierAttribute "" }}
				IdentifierAttribute: "{{ $value.TagsIdentifierAttribute }}",
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) ServicePackageName() string {
{{- if eq .ProviderPackage "meta" }}
	return "{{ .ProviderPackage }}"
{{- else }}
	return names.{{ .ProviderNameUpper }}
{{- end }}
}

{{- if not .SkipClientGenerate }}
	{{if eq .SDKVersion "1" "1,2" }}
// NewConn returns a new AWS SDK for Go v1 client for this service package's AWS API.
func (p *servicePackage) NewConn(ctx context.Context, config map[string]any) (*{{ .GoV1Package }}_sdkv1.{{ .GoV1ClientTypeName }}, error) {
	sess := config["session"].(*session_sdkv1.Session)

	if endpoint := config["endpoint"].(string); endpoint != "" && sess.Config.UseFIPSEndpoint == endpoints_sdkv1.FIPSEndpointStateEnabled {
		// The SDK doesn't allow setting a custom non-FIPS endpoint *and* enabling UseFIPSEndpoint.
		// However there are a few cases where this is necessary; some services don't have FIPS endpoints,
		// and for some services (e.g. CloudFront) the SDK generates the wrong fips endpoint.
		// While forcing this to disabled may result in the end-user not using a FIPS endpoint as specified
		// by setting UseFIPSEndpoint=true in the provider, the user also explicitly changed the endpoint, so
		// here we need to assume the user knows what they're doing.
		log.Printf("[WARN] UseFIPSEndpoint is enabled but a custom endpoint (%s) is configured, ignoring UseFIPSEndpoint.", endpoint)
		sess.Config.UseFIPSEndpoint = endpoints_sdkv1.FIPSEndpointStateDisabled
	}

	return {{ .GoV1Package }}_sdkv1.New(sess.Copy(&aws_sdkv1.Config{Endpoint: aws_sdkv1.String(config["endpoint"].(string))})), nil
}
	{{- end }}

	{{if eq .SDKVersion "2" "1,2" }}
// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*{{ .GoV2Package }}_sdkv2.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	return {{ .GoV2Package }}_sdkv2.NewFromConfig(cfg, func(o *{{ .GoV2Package }}_sdkv2.Options) {
		if endpoint := config["endpoint"].(string); endpoint != "" {
			o.BaseEndpoint = aws_sdkv2.String(endpoint)

			if (o.EndpointOptions.UseFIPSEndpoint == aws_sdkv2.FIPSEndpointStateEnabled) {
				// The SDK doesn't allow setting a custom non-FIPS endpoint *and* enabling UseFIPSEndpoint.
				// However there are a few cases where this is necessary; some services don't have FIPS endpoints,
				// and for some services (e.g. CloudFront) the SDK generates the wrong fips endpoint.
				// While forcing this to disabled may result in the end-user not using a FIPS endpoint as specified
				// by setting UseFIPSEndpoint=true, the user also explicitly changed the endpoint, so
				// here we need to assume the user knows what they're doing.
				log.Printf("[WARN] UseFIPSEndpoint is enabled but a custom endpoint (%s) is configured, ignoring UseFIPSEndpoint.", endpoint)
				o.EndpointOptions.UseFIPSEndpoint = aws_sdkv2.FIPSEndpointStateDisabled
			}
		}
	}), nil
}
	{{- end }}
{{- end }}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
