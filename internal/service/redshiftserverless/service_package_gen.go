// Code generated by internal/generate/servicepackages/main.go; DO NOT EDIT.

package redshiftserverless

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []func(context.Context) (datasource.DataSourceWithConfigure, error) {
	return []func(context.Context) (datasource.DataSourceWithConfigure, error){}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []func(context.Context) (resource.ResourceWithConfigure, error) {
	return []func(context.Context) (resource.ResourceWithConfigure, error){}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) map[string]func() *schema.Resource {
	return map[string]func() *schema.Resource{
		"aws_redshiftserverless_credentials": DataSourceCredentials,
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) map[string]func() *schema.Resource {
	return map[string]func() *schema.Resource{
		"aws_redshiftserverless_endpoint_access": ResourceEndpointAccess,
		"aws_redshiftserverless_namespace":       ResourceNamespace,
		"aws_redshiftserverless_resource_policy": ResourceResourcePolicy,
		"aws_redshiftserverless_snapshot":        ResourceSnapshot,
		"aws_redshiftserverless_usage_limit":     ResourceUsageLimit,
		"aws_redshiftserverless_workgroup":       ResourceWorkgroup,
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.RedshiftServerless
}

var ServicePackage = &servicePackage{}
