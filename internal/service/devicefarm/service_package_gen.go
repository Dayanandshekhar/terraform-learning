// Code generated by internal/generate/servicepackages/main.go; DO NOT EDIT.

package devicefarm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []func(context.Context) (datasource.DataSourceWithConfigure, error) {
	return []func(context.Context) (datasource.DataSourceWithConfigure, error){}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []func(context.Context) (resource.ResourceWithConfigure, error) {
	return []func(context.Context) (resource.ResourceWithConfigure, error){}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) map[string]func() *schema.Resource {
	return map[string]func() *schema.Resource{}
}

func (p *servicePackage) SDKResources(ctx context.Context) map[string]func() *schema.Resource {
	return map[string]func() *schema.Resource{
		"aws_devicefarm_device_pool":       ResourceDevicePool,
		"aws_devicefarm_instance_profile":  ResourceInstanceProfile,
		"aws_devicefarm_network_profile":   ResourceNetworkProfile,
		"aws_devicefarm_project":           ResourceProject,
		"aws_devicefarm_test_grid_project": ResourceTestGridProject,
		"aws_devicefarm_upload":            ResourceUpload,
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.DeviceFarm
}

var ServicePackage = &servicePackage{}
