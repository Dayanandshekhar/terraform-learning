// Code generated by internal/generate/servicepackages/main.go; DO NOT EDIT.

package logs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []func(context.Context) (datasource.DataSourceWithConfigure, error) {
	return []func(context.Context) (datasource.DataSourceWithConfigure, error){}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []func(context.Context) (resource.ResourceWithConfigure, error) {
	return []func(context.Context) (resource.ResourceWithConfigure, error){}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) map[string]func() *schema.Resource {
	return map[string]func() *schema.Resource{
		"aws_cloudwatch_log_data_protection_policy_document": dataSourceDataProtectionPolicyDocument,
		"aws_cloudwatch_log_group":                           dataSourceGroup,
		"aws_cloudwatch_log_groups":                          dataSourceGroups,
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) map[string]func() *schema.Resource {
	return map[string]func() *schema.Resource{
		"aws_cloudwatch_log_data_protection_policy": resourceDataProtectionPolicy,
		"aws_cloudwatch_log_destination":            resourceDestination,
		"aws_cloudwatch_log_destination_policy":     resourceDestinationPolicy,
		"aws_cloudwatch_log_group":                  resourceGroup,
		"aws_cloudwatch_log_metric_filter":          resourceMetricFilter,
		"aws_cloudwatch_log_resource_policy":        resourceResourcePolicy,
		"aws_cloudwatch_log_stream":                 resourceStream,
		"aws_cloudwatch_log_subscription_filter":    resourceSubscriptionFilter,
		"aws_cloudwatch_query_definition":           resourceQueryDefinition,
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.Logs
}

var ServicePackage = &servicePackage{}
